//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class <%= endpoint.name.pretty_name %>Endpoint
{<% endpoint.methods.each do |method|
  paged = (method.return != nil) && (method.return.is_array == true) && ((method.request["response_body"] != nil) && (method.request["response_body"]["total_pages"] != nil)) %>
        [TestMethod]
        public void <%= method.name.pretty_name %>Test()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();
<% if method.request['response_body'] %>
                string json = @"<%= method.request['response_body'].gsub "\"", "\"\"" %>";
                clients.JsonResponse = json;
<% end %>
                clients.ExpectedStatusCode = (HttpStatusCode)<%= method.request['response_status'] %>;
                var cfClient = clients.CreateCloudFoundryClient();
<% method_params = method.parameters.map {|p| p.name}.join ', '
method.parameters.each do | para |
if para.type.properties != {}
if para.is_array %>
                <%= para.definition %> <%= para.name %> = new <%= para.definition.chomp('[]') %>[0];
<% else %>
                <%= para.definition %> <%= para.name %> = new <%= para.definition %>();
<% end elsif para.type.name == SDKBuilder::Config.language.types.guid %>
                <%= para.definition %> <%= para.name %> = Guid.NewGuid();
<% elsif para.type.name == SDKBuilder::Config.language.types.string %>
                <%= para.definition %> <%= para.name %> = Guid.NewGuid().ToString();
<% elsif para.type.name == SDKBuilder::Config.language.types.integer %>
                <%= para.definition %> <%= para.name %> = 0;
<% elsif para.type.name == SDKBuilder::Config.language.types.boolean %>
                <%= para.definition %> <%= para.name %> = true;
<% else %>
                <%= para.definition %> <%= para.name %> = null;
<% end end %>
<% unless method.return %>
                cfClient.<%= endpoint.name.pretty_name %>.<%= method.name.pretty_name %>(<%= method_params%>).Wait();
<% else %>
                var obj = cfClient.<%= endpoint.name.pretty_name %>.<%= method.name.pretty_name %>(<%= method_params%>).Result;
<% if method.request['response_body']
   json_body = JSON.parse(method.request['response_body'])
   array = json_body.is_a? Array
   data_class_name = "#{method.name.pretty_name}Response"
   if paged
   json_body.each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
                Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj.Properties.<%= key.pretty_name %>), true);<% end end
i = 0
json_body["resources"].each do |resource|
if resource["metadata"]
resource["metadata"].each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
                Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj[<%= i %>].EntityMetadata.<%= key.pretty_name %>), true);<% end end end
if resource["entity"]
resource["entity"].each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
                Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj[<%= i %>].<%= key.pretty_name %>), true);<% end end end
resource.each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
                Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj[<%= i %>].<%= key.pretty_name %>), true);<% end end
i=i+1 end
elsif array %>
<% json_body.each_with_index do |val, index|
val.each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
                Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj[<%= index %>].<%= key.pretty_name %>), true);<% end end end else %>
<% if json_body["metadata"]
json_body["metadata"].each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
                Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj.EntityMetadata.<%= key.pretty_name %>), true);<% end end end
if json_body["entity"]
json_body["entity"].each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
                Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj.<%= key.pretty_name %>), true);<% end end end
json_body.each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
                Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj.<%= key.pretty_name %>), true);<% end end end %>
<%end end %>
            }
        }
<% end %>
    }
}