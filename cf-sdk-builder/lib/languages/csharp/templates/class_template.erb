//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.Common;
using CloudFoundry.CloudController.V2.Client.Data;
using Newtonsoft.Json;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;


namespace CloudFoundry.CloudController.V2.Client
{
    /// <summary>
    /// <%= endpoint.name.pretty_name %> Endpoint
    /// </summary>
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public partial class <%= endpoint.name.pretty_name %>Endpoint : CloudFoundry.CloudController.V2.Client.Base.Abstract<%= endpoint.name.pretty_name %>Endpoint
    {
        internal <%= endpoint.name.pretty_name %>Endpoint(CloudFoundryClient client) : base()
        {
            this.Client = client;
        }    
    }
}

namespace CloudFoundry.CloudController.V2.Client.Base
{

    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public abstract class Abstract<%= endpoint.name.pretty_name %>Endpoint : BaseEndpoint
    {<% endpoint.methods.each do |method| %>

        /// <summary>
        /// <%= method.description %><%(method.explanation || '').lines.each do |line| %>
        /// <para><%= line.strip %></para><% end %>
        /// <para>For detailed information, see online documentation at: "<%= "http://apidocs.cloudfoundry.org/#{SDKBuilder::Config.language.release_version}/#{method.endpoint.name}/#{method.name}.html" %>"</para>
        /// </summary><%next unless method.request
is_paged = (method.return != nil) && (method.return.is_array == true) && ((method.request["response_body"] != nil) && (method.request["response_body"]["total_pages"] != nil))
route_params = SDKBuilder::Method.get_route_params method.route
method_params = method.parameters.map {|p| "#{p.definition} #{p.name}"}.join ', '
if method.http_method == "GET" then if is_paged %>
        public async Task<PagedResponseCollection<<%= method.return.definition.chomp('[]') %>>> <%= method.name.pretty_name %>(<%= method_params %>)
        {
            return await <%= method.name.pretty_name %>(<%= method.parameters.length > 0 ? (method.parameters.map {|p| p.name}.join ', ') + ", " : "" %>new RequestOptions());
        }
<% end end %><% if is_paged %>
        /// <summary>
        /// <%= method.description %><%(method.explanation || '').lines.each do |line| %>
        /// <para><%= line.strip %></para><% end %>
        /// <para>For detailed information, see online documentation at: "<%= "http://apidocs.cloudfoundry.org/#{SDKBuilder::Config.language.release_version}/#{method.endpoint.name}/#{method.name}.html" %>"</para>
        /// </summary>
        public async Task<PagedResponseCollection<<%= method.return.definition.chomp('[]') %>>> <%= method.name.pretty_name %>(<%= method_params.length > 0 ? method_params + ", " : "" %>RequestOptions options)<% elsif method.return && method.return.is_array %>
        public async Task<%= "<#{method.return.definition}>" %> <%= method.name.pretty_name %>(<%= method_params %>)<% else %>
        public async Task<%= method.return ? "<#{method.return.definition}>" : "" %> <%= method.name.pretty_name %>(<%= method_params %>)<% end %>
        {<% if route_params.length > 0 %>
            string route = string.Format("<%= SDKBuilder::Method.get_string_format_route method.route %>", <%= route_params.join ', ' %>);<%else%>
            string route = "<%= method.route %>";<%end%><% if is_paged %>
            string endpoint = this.Client.CloudTarget.ToString().TrimEnd('/') + route + options.ToString();<% else %>
            string endpoint = this.Client.CloudTarget.ToString().TrimEnd('/') + route;<% end %>
            var client = this.GetHttpClient();
            client.Uri = new Uri(endpoint);
            client.Method = <%= method.http_method.to_http_method %>;
            client.Headers.Add(await BuildAuthenticationHeader());<%if method.request['request_content_type'] %>
            client.ContentType = "<%= method.request['request_content_type'] %>";<%end%><% if method.request["request_body"] %>
            client.Content = JsonConvert.SerializeObject(value).ConvertToStream();<% end %>
            var expectedReturnStatus = <%= method.request['response_status'] %>;
            var response = await this.SendAsync(client, expectedReturnStatus);<%if method.return then if is_paged %>
            return Utilities.DeserializePage<<%= method.return.definition.chomp('[]') %>>(await response.ReadContentAsStringAsync());<% elsif method.return.is_array %>
            return Utilities.DeserializeJsonArray<<%= method.return.definition.chomp('[]') %>>(await response.ReadContentAsStringAsync());<% else %>
            return Utilities.DeserializeJson<<%= method.return.definition %>>(await response.ReadContentAsStringAsync());<% end %><% end %>
        }<% end %>
    }
}