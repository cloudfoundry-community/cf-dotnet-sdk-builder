//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace CloudFoundry.CloudController.V2.Test.Serialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class <%= endpoint.name.pretty_name %>Test
    {
<% data_classes["requests"].each do |data_class, body|
json_body = JSON.parse(body)
next if json_body.length == 0
is_array = json_body.is_a? Array%>
        [TestMethod]
        public void Test<%= data_class.name %>()
        {
            string json = @"<%= body.gsub "\"", "\"\"" %>";
<% if is_array %>
            <%= data_class.name %>[] request = new <%= data_class.name %>[<%= json_body.length %>];
<% json_body.each_with_index do |val, index| %>
            request[<%= index %>] = new <%= data_class.name %>();
<% val.each do |key, value|
if (value.is_a? Hash) then %>
            request[<%= index %>].<%= key.pretty_name %> = TestUtil.GetJsonDictonary(@"<%= value.to_json.gsub "\"", "\"\"" %>");
<% elsif (value.is_a? Array) then %>
            request[<%= index %>].<%= key.pretty_name %> = Array.ConvertAll(TestUtil.GetJsonArray(@"<%= value.to_json.gsub "\"", "\"\"" %>"), (p => (Dictionary<string, dynamic>)p));
<% else
if (value == nil) then val = "null"
elsif (value.is_a? Fixnum) || (value.is_a? Integer) || (value.is_a? Float) || (!!value == value) then val = value
elsif (value.is_guid?) then val = "new Guid(\"#{value}\")"
else val = "\"#{value}\"" end%>
            request[<%= index %>].<%= key.pretty_name %> = <%= val %>;<% end end end %>
<% else %>
            <%= data_class.name %> request = new <%= data_class.name %>();
<% json_body.each do |key, value|
if (value.is_a? Hash) then %>
            request.<%= key.pretty_name %> = TestUtil.GetJsonDictonary(@"<%= value.to_json.gsub "\"", "\"\"" %>");
<% elsif (value.is_a? Array) then %>
            request.<%= key.pretty_name %> = Array.ConvertAll(TestUtil.GetJsonArray(@"<%= value.to_json.gsub "\"", "\"\"" %>"), (p => (Dictionary<string, dynamic>)p));
<% else
if (value == nil) then val = "null"
elsif (value.is_a? Fixnum) || (value.is_a? Integer) || (value.is_a? Float) || (!!value == value) then val = value
elsif (value.is_guid?) then val = "new Guid(\"#{value}\")"
else val = "\"#{value}\"" end%>
            request.<%= key.pretty_name %> = <%= val %>;<% end end end %>
            string result = JsonConvert.SerializeObject(request, Formatting.None);
            Assert.AreEqual(result, TestUtil.ToUnformatedJsonString(json));
        }<% end %>
    }
}
