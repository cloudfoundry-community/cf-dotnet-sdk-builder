//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class <%= endpoint.name.pretty_name %>Test
    {
<% data_classes["responses"].each do |data_class, body| %>
<% json_body = JSON.parse(body)
       paged = (!json_body.is_a? Array) && (!json_body["total_pages"].nil?)
       array = json_body.is_a? Array%>
        [TestMethod]
        public void Test<%= data_class.name %>()
        {
            string json = @"<%= body.gsub "\"", "\"\"" %>";
<% if paged %>
            PagedResponseCollection<<%= data_class.name %>> page = Utilities.DeserializePage<<%= data_class.name %>>(json);
<% json_body.each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
            Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(page.Properties.<%= key.pretty_name %>), true);<% end end
i = 0
json_body["resources"].each do |resource|
if resource["metadata"]
resource["metadata"].each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
            Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(page[<%= i %>].EntityMetadata.<%= key.pretty_name %>), true);<% end end end
if resource["entity"]
resource["entity"].each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
            Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(page[<%= i %>].<%= key.pretty_name %>), true);<% end end end
resource.each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
            Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(page[<%= i %>].<%= key.pretty_name %>), true);<% end end
i=i+1 end
elsif array %>
            <%= data_class.name %>[] obj = Utilities.DeserializeJsonArray<<%= data_class.name %>>(json);
<% json_body.each_with_index do |val, index|
val.each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
            Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj[<%= index %>].<%= key.pretty_name %>), true);<% end end end else %>
            <%= data_class.name %> obj = Utilities.DeserializeJson<<%= data_class.name %>>(json);
<% if json_body["metadata"]
json_body["metadata"].each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
            Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj.EntityMetadata.<%= key.pretty_name %>), true);<% end end end
if json_body["entity"]
json_body["entity"].each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
            Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj.<%= key.pretty_name %>), true);<% end end end
json_body.each do |key, value| if !(value.is_a? Hash) && !(value.is_a? Array) %>
            Assert.AreEqual("<%= value %>", TestUtil.ToTestableString(obj.<%= key.pretty_name %>), true);<% end end end %>
        }<% end %>
    }
}
